section .data
|1| 0 1 0 1 0 1 0 0 1 0 1 0 1 0 1



#define :: __
#define >> ->

section .text
start, 0 -> start, 0, l
start, 1 -> start, 1, l
start, lambda -> length::1, lambda, r

length::1, 1 -> length::2, 1, r
length::1, 0 -> length::2, 0, r
length::1, lambda -> end, err, s

length::2, 1 -> length::3, 1, r ;#d
length::2, 0 -> length::3, 0, r
length::2, lambda -> end, err, s

length::3, 1 -> length::4, 1, r
length::3, 0 -> length::4, 0, r
length::3, lambda -> end, err, s

length::4, 1 -> length::5, 1, r
length::4, 0 -> length::5, 0, r
length::4, lambda -> end, err, s

length::5, 1 -> length::6, 1, r
length::5, 0 -> length::6, 0, r
length::5, lambda -> end, err, s

length::6, 1 -> length::7, 1, r
length::6, 0 -> length::7, 0, r
length::6, lambda -> end, err, s

length::7, 1 -> length::8, 1, r
length::7, 0 -> length::8, 0, r
length::7, lambda -> end, err, s

length::8, 1 -> length::9, 1, r
length::8, 0 -> length::9, 0, r
length::8, lambda -> end, err, s

length::9, 1 -> length::10, 1, r
length::9, 0 -> length::10, 0, r
length::9, lambda -> end, err, s

length::10, 1 -> length::11, 1, r
length::10, 0 -> length::11, 0, r
length::10, lambda -> end, err, s

length::11, 1 -> length::12, 1, r
length::11, 0 -> length::12, 0, r
length::11, lambda -> end, err, s

length::12, 1 -> length::13, 1, r
length::12, 0 -> length::13, 0, r
length::12, lambda -> end, err, s

length::13, 1 -> length::14, 1, r
length::13, 0 -> length::14, 0, r
length::13, lambda -> end, err, s

length::14, 1 -> length::15, 1, r
length::14, 0 -> length::15, 0, r
length::14, lambda -> end, err, s

length::15, 1 -> length::16, 1, r
length::15, 0 -> length::16, 0, r
length::15, lambda -> end, err, s

length::16, 1 -> length::17, 1, r
length::16, 0 -> length::17, 0, r
length::16, lambda -> end, err, s

length::17, 1 -> end, err, s
length::17, 0 -> end, err, s
length::17, lambda -> to_start_f::start, lambda, l

to_start_f::start, 1 -> to_start_f::start, 1, l
to_start_f::start, 0 -> to_start_f::start, 0, l


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to_start_f::start, lambda -> dual::start, lambda, s ; знайдемо двоїсту функцію
dual::ret, = -> dual1::start, lambda, l


dual1::ret, = -> loop::start, =, s

loop::start, = -> loop::start, =, l
loop::start, 1 -> loop::start, 1, l
loop::start, 0 -> loop::start, 0, l
loop::start, lambda -> loop::write, /, r

loop::write, 0 -> loop::write0, 0, r
loop::write, 1 -> loop::write1, 1, r

loop::write, lambda -> loop::writeend, lambda, l ; вихід з циклу

loop::writeend, / -> loop::writeend, =, r
loop::writeend, lambda -> loop::writeend, lambda, r

loop::writeend, = -> index::start, =, s

loop::write0, 1 -> loop::write0, 1, r
loop::write0, 0 -> loop::write0, 0, r
loop::write0, lambda -> loop::write0, lambda, r;до =
loop::write0, = -> loop::write01, =, r

loop::write01, * -> loop::write01, *, r ; если не пустота - скипаем
loop::write01, + -> loop::write01, +, r
loop::write01, 1 -> loop::write01, 1, r
loop::write01, 0 -> loop::write01, 0, r

loop::write01, lambda -> loop::ws1, 0, r ; пишем

loop::write1, 1 -> loop::write1, 1, r
loop::write1, 0 -> loop::write1, 0, r
loop::write1, lambda -> loop::write1, lambda, r;до =
loop::write1, = -> loop::write11, =, r

loop::write11, * -> loop::write11, *, r ; если не пустота - скипаем
loop::write11, + -> loop::write11, +, r
loop::write11, 1 -> loop::write11, 1, r
loop::write11, 0 -> loop::write11, 0, r

loop::write11, lambda -> loop::ws1, 1, r ; пишем



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
loop::ws1, lambda -> loop::ws2, *, r
loop::ws2, lambda -> loop::ws3, *, r
loop::ws3, lambda -> loop::ws4, *, r
loop::ws4, lambda -> loop::tostart, +, l
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

loop::tostart, lambda -> loop::tostart, lambda, l
loop::tostart, 1 -> loop::tostart, 1, l
loop::tostart, 0 -> loop::tostart, 0, l
loop::tostart, * -> loop::tostart, *, l
loop::tostart, = -> loop::tostart, =, l
loop::tostart, + -> loop::tostart, +, l

loop::tostart, / -> xor::start, /, r

;xor::start начальная точка - первое число
xor::start, 0 -> xor::num, 0, r	
xor::start, 1 -> xor::num, 1, r
xor::num, 1 -> xor::num1, 1, l
xor::num, 0 -> xor::num0, 0, l
xor::num, = -> xor::numeq, =, l
xor::num, lambda -> xor::numeq, lambda, l ; возврат если лямбда или =
xor::numeq, 0 -> loop::afterxor_ret, lambda, l
xor::numeq, 1 -> loop::afterxor_ret, lambda, l
xor::num0, 1 -> xor::start, 1, r
xor::num0, 0 -> xor::start, 0, r
xor::num1, 1 -> xor::start, 0, r
xor::num1, 0 -> xor::start, 1, r
;xor::ret



loop::afterxor_ret,  lambda -> loop::afterxor_ret, lambda, l
loop::afterxor_ret, 1 -> loop::afterxor_ret, 1, l
loop::afterxor_ret, 0 -> loop::afterxor_ret, 0, l
loop::afterxor_ret, * -> loop::afterxor_ret, *, l
loop::afterxor_ret, = -> loop::afterxor_ret, =, l
loop::afterxor_ret, + -> loop::afterxor_ret, +, l

loop::afterxor_ret, / -> loop::write, /, r


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
index::start, = -> index::empty, =, r

index::empty, 0 -> index::empty, 0, r
index::empty, 1 -> index::empty, 1, r 
index::empty, * -> index::empty, *, r 
index::empty, + -> index::x4, +, r 
;тут должна быть обработка ошибки про лямбда

index::x4, 0 -> index::x4, 0, r
index::x4, 1 -> index::x4, 1, r 
index::x4, * -> index::x41, x4, r
index::x41, * -> index::x41, *, r
index::x41, + -> index::x3, +, r

index::x3, 0 -> index::x3, 0, r
index::x3, 1 -> index::x3, 1, r 
index::x3, * -> index::x31, x3, r
index::x31, * -> index::x31, *, r
index::x31, + -> index::x3x4, +, r

index::x3x4, 0 -> index::x3x4, 0, r
index::x3x4, 1 -> index::x3x4, 1, r 
index::x3x4, * -> index::x31x4, x3, r
index::x31x4, * -> index::x31x41, x4, r
index::x31x41, * -> index::x31x41, *, r
index::x31x41, + -> index::x2, +, r

index::x2, 0 -> index::x2, 0, r
index::x2, 1 -> index::x2, 1, r 
index::x2, * -> index::x21, x2, r
index::x21, * -> index::x21, *, r
index::x21, + -> index::x2x4, +, r

index::x2x4, 0 -> index::x2x4, 0, r
index::x2x4, 1 -> index::x2x4, 1, r 
index::x2x4, * -> index::x21x4, x2, r
index::x21x4, * -> index::x21x41, x4, r
index::x21x41, * -> index::x21x41, *, r
index::x21x41, + -> index::x2x3, +, r

index::x2x3, 0 -> index::x2x3, 0, r
index::x2x3, 1 -> index::x2x3, 1, r 
index::x2x3, * -> index::x21x3, x2, r
index::x21x3, * -> index::x21x31, x3, r
index::x21x31, * -> index::x21x31, *, r
index::x21x31, + -> index::x2x3x4, +, r


index::x2x3x4, 0 -> index::x2x3x4, 0, r
index::x2x3x4, 1 -> index::x2x3x4, 1, r 
index::x2x3x4, * -> index::x21x3x4, x2, r
index::x21x3x4, * -> index::x21x31x4, x3, r
index::x21x31x4, * -> index::x21x31x41, x4, r
index::x21x31x41, + -> index::x1, +, r

index::x1, 0 -> index::x1, 0, r
index::x1, 1 -> index::x1, 1, r 
index::x1, * -> index::x11, x1, r
index::x11, * -> index::x11, *, r
index::x11, + -> index::x1x4, +, r

index::x1x4, 0 -> index::x1x4, 0, r
index::x1x4, 1 -> index::x1x4, 1, r 
index::x1x4, * -> index::x11x4, x1, r
index::x11x4, * -> index::x11x41, x4, r
index::x11x41, * -> index::x11x41, *, r
index::x11x41, + -> index::x1x3, +, r

index::x1x3, 0 -> index::x1x3, 0, r
index::x1x3, 1 -> index::x1x3, 1, r 
index::x1x3, * -> index::x11x3, x1, r
index::x11x3, * -> index::x11x31, x3, r
index::x11x31, * -> index::x11x31, *, r
index::x11x31, + -> index::x1x3x4, +, r

index::x1x3x4, 0 -> index::x1x3x4, 0, r
index::x1x3x4, 1 -> index::x1x3x4, 1, r 
index::x1x3x4, * -> index::x11x3x4, x1, r
index::x11x3x4, * -> index::x11x31x4, x3, r
index::x11x31x4, * -> index::x11x31x41, x4, r
index::x11x31x41, + -> index::x1x2, +, r

index::x1x2, 0 -> index::x1x2, 0, r
index::x1x2, 1 -> index::x1x2, 1, r 
index::x1x2, * -> index::x11x2, x1, r
index::x11x2, * -> index::x11x21, x2, r
index::x11x21, * -> index::x11x21, *, r
index::x11x21, + -> index::x1x2x4, +, r

index::x1x2x4, 0 -> index::x1x2x4, 0, r
index::x1x2x4, 1 -> index::x1x2x4, 1, r 
index::x1x2x4, * -> index::x11x2x4, x1, r
index::x11x2x4, * -> index::x11x21x4, x2, r
index::x11x21x4, * -> index::x11x21x41, x4, r
index::x11x21x41, + -> index::x1x2x3, +, r

index::x1x2x3, 0 -> index::x1x2x3, 0, r
index::x1x2x3, 1 -> index::x1x2x3, 1, r 
index::x1x2x3, * -> index::x11x2x3, x1, r
index::x11x2x3, * -> index::x11x21x3, x2, r
index::x11x21x3, * -> index::x11x21x31, x3, r
index::x11x21x31, + -> index::x1x2x3x4, +, r

index::x1x2x3x4, 0 -> index::x1x2x3x4, 0, r
index::x1x2x3x4, 1 -> index::x1x2x3x4, 1, r 
index::x1x2x3x4, * -> index::x11x2x3x4, x1, r
index::x11x2x3x4, * -> index::x11x21x3x4, x2, r
index::x11x21x3x4, * -> index::x11x21x31x4, x3, r
index::x11x21x31x4, + -> filter::start, x4, s

filter::start, x4 -> filter::start, x4, l
filter::start, x1 -> filter::start, x1, l
filter::start, x2 -> filter::start, x2, l
filter::start, x3 -> filter::start, x3, l
filter::start, 1 -> filter::start, 1, l
filter::start, 0 -> filter::start, 0, l
filter::start, + -> filter::start, +, l
filter::start, * -> filter::start, *, l
filter::start, = -> filter::execute, =, r

filter::execute, 1->filter::skip, *, r
filter::execute, 0->filter::clean, *, r

filter::clean, x4 -> filter::clean, *, r
filter::clean, x1 -> filter::clean, *, r
filter::clean, x2 -> filter::clean, *, r
filter::clean, x3 -> filter::clean, *, r
filter::clean, * -> filter::clean, *, r
filter::clean, + -> filter::clean, *, r
filter::clean, 0 -> filter::clean, *, r
filter::clean, 1 -> filter::execute, 1, s

filter::clean, lambda -> cleaner::start,lambda, l

filter::skip, x4 -> filter::skip, x4, r
filter::skip, x1 -> filter::skip, x1, r
filter::skip, x2 -> filter::skip, x2, r
filter::skip, x3 -> filter::skip, x3, r
filter::skip, * -> filter::skip, *, r

filter::skip, lambda -> cleaner::start,lambda, l

filter::skip, + -> filter::execute, +, r

cleaner::start, x4 -> cleaner::start, x4, l
cleaner::start, x1 -> cleaner::start, x1, l
cleaner::start, x2 -> cleaner::start, x2, l
cleaner::start, x3 -> cleaner::start, x3, l
cleaner::start, 1 -> cleaner::start, 1, l
cleaner::start, * -> cleaner::start, *, l
cleaner::start, + -> cleaner::start, +, l
cleaner::start, = -> cleaner::execute, lambda, r


cleaner::execute, x4 -> cleaner::execute, x4, r
cleaner::execute, x1 -> cleaner::execute, x1, r
cleaner::execute, x2 -> cleaner::execute, x2, r
cleaner::execute, x3 -> cleaner::execute, x3, r
cleaner::execute, 1 -> cleaner::execute, 1, r
cleaner::execute, + -> cleaner::execute, +, r

cleaner::execute, * -> cleaner::write, /, r

cleaner::write, * -> cleaner::write, *, r

cleaner::write, x4 -> cleaner::writex4, *, l
cleaner::write, x1 -> cleaner::writex1, *, l
cleaner::write, x2 -> cleaner::writex2, *, l
cleaner::write, x3 -> cleaner::writex3, *, l
cleaner::write, 1 -> cleaner::write1, *, l
cleaner::write, + -> cleaner::writepl, *, l

cleaner::write, lambda -> clear::star, lambda, l

clear::star, * -> clear::star, lambda, l
clear::star, / -> clear::star, lambda, l
clear::star, + -> clear::star, lambda, l
clear::star, lambda -> end, 0, s

clear::star, x4 -> end, x4, s
clear::star, x3 -> end, x3, s
clear::star, x2 -> end, x2, s
clear::star, x1 -> end, x1, s
clear::star, 1 -> end, 1, s

cleaner::writex4, * -> cleaner::writex4, *, l
cleaner::writex4, / -> cleaner::execute, x4, s

cleaner::writex1, * -> cleaner::writex1, *, l
cleaner::writex1, / -> cleaner::execute, x1, s

cleaner::writex2, * -> cleaner::writex2, *, l
cleaner::writex2, / -> cleaner::execute, x2, s

cleaner::writex3, * -> cleaner::writex3, *, l
cleaner::writex3, / -> cleaner::execute, x3, s

cleaner::writepl, * -> cleaner::writepl, *, l
cleaner::writepl, / -> cleaner::writepl_ch, +, l

cleaner::writepl_ch, lambda ->cleaner::execute, 1, r
cleaner::writepl_ch, x1 ->cleaner::execute, x1, r
cleaner::writepl_ch, x2 ->cleaner::execute, x2, r
cleaner::writepl_ch, x3 ->cleaner::execute, x3, r
cleaner::writepl_ch, x4 ->cleaner::execute, x4, r

cleaner::write1, * -> cleaner::write1, *, l
cleaner::write1, / -> cleaner::execute, 1, s


;dual::start  вход в процедуру слева на пустой клетке от слова
dual::start, lambda >> dual::st1, =, r

dual::st1, 1 >> dual::st1, 1, r
dual::st1, 0 >> dual::st1, 0, r 
dual::st1, lambda >> dual::reversL, /, l ; огородили строку слево и справо

dual::reversL, / >> dual::reversL, /, l
dual::reversL, 1 >> dual::reversL, 1, l
dual::reversL, 0 >> dual::reversL, 0, l
dual::reversL, = >> dual::reverse, =, s ; реверснулись на начало

;reverse_low для позиции до =, reverse_high - после

dual::reverse, = >> dual::reverse_low, =, r ; перетягиваем по одному символу

dual::reverse_low, lambda >> dual::reverse_low, lambda, r
dual::reverse_low, / >> dual::retern_to_eq, lambda, l
;если нашли  / - возвращаемся 

dual::reverse_low, 1 >> dual::reverse_low0, lambda, l
dual::reverse_low, 0 >> dual::reverse_low1, lambda, l
dual::reverse_low1, lambda >> dual::reverse_low1, lambda, l
dual::reverse_low0, lambda >> dual::reverse_low0, lambda, l

dual::reverse_low1, = >> dual::reverse_high1, =, l
dual::reverse_low0, = >> dual::reverse_high0, =, l

dual::reverse_high1, 0 >> dual::reverse_high1, 0, l
dual::reverse_high1, 1 >> dual::reverse_high1, 1, l
dual::reverse_high1, lambda >> dual::retR1, 1, s

dual::reverse_high0, 0 >> dual::reverse_high0, 0, l
dual::reverse_high0, 1 >> dual::reverse_high0, 1, l
dual::reverse_high0, lambda >> dual::retR1, 0, s

dual::retR1, 0 >> dual::retR1, 0, r
dual::retR1, 1 >> dual::retR1, 1, r
dual::retR1, = >> dual::reverse, =, s

dual::retern_to_eq, lambda -> dual::retern_to_eq, lambda, l
dual::retern_to_eq, = -> dual::ret, =, s
;dual::end стоит на равно после числа

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;dual1::start  вход в процедуру слева на пустой клетке от слова
dual1::start, 1 >> dual1::start, 1, l
dual1::start, 0 >> dual1::start, 0, l
dual1::start, lambda >> dual1::st1, =, r
dual1::st1, 1 >> dual1::st1, 1, r
dual1::st1, 0 >> dual1::st1, 0, r 
dual1::st1, lambda >> dual1::reversL, /, l ; огородили строку слево и справо

dual1::reversL, / >> dual1::reversL, /, l
dual1::reversL, 1 >> dual1::reversL, 1, l
dual1::reversL, 0 >> dual1::reversL, 0, l
dual1::reversL, = >> dual1::reverse, =, s ; реверснулись на начало

;reverse_low для позиции до =, reverse_high - после

dual1::reverse, = >> dual1::reverse_low, =, r ; перетягиваем по одному символу

dual1::reverse_low, lambda >> dual1::reverse_low, lambda, r
dual1::reverse_low, / >> dual1::retern_to_eq, lambda, l

dual1::reverse_low, + >> dual1::reverse_low, +, r
dual1::reverse_low, * >> dual1::reverse_low, *, r
;если нашли  / - возвращаемся 

dual1::reverse_low, 1 >> dual1::reverse_low0, +, l
dual1::reverse_low, 0 >> dual1::reverse_low1, *, l


dual1::reverse_low1, + >> dual1::reverse_low1, +, l
dual1::reverse_low1, * >> dual1::reverse_low1, *, l
dual1::reverse_low0, + >> dual1::reverse_low0, +, l
dual1::reverse_low0, * >> dual1::reverse_low0, *, l

dual1::reverse_low1, = >> dual1::reverse_high1, =, l
dual1::reverse_low0, = >> dual1::reverse_high0, =, l

dual1::reverse_high1, 0 >> dual1::reverse_high1, 0, l
dual1::reverse_high1, 1 >> dual1::reverse_high1, 1, l
dual1::reverse_high1, lambda >> dual1::retR1, 1, s

dual1::reverse_high0, 0 >> dual1::reverse_high0, 0, l
dual1::reverse_high0, 1 >> dual1::reverse_high0, 1, l
dual1::reverse_high0, lambda >> dual1::retR1, 0, s

dual1::retR1, 0 >> dual1::retR1, 0, r
dual1::retR1, 1 >> dual1::retR1, 1, r
dual1::retR1, = >> dual1::reverse, =, s

dual1::retern_to_eq, + -> dual1::retern_to_eq, +, l
dual1::retern_to_eq, * -> dual1::retern_to_eq, *, l
dual1::retern_to_eq, = -> dual1::recovery, lambda, r

dual1::recovery, + -> dual1::recovery, 1, r
dual1::recovery, * -> dual1::recovery, 0, r
dual1::recovery, lambda -> dual1::ret, =, s


;dual1::end стоит на равно после числа
